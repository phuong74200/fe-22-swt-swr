B | What is software modeling?
A. Developing models of software.
B. Designing software applications before coding.
C. Developing software diagrams.
D. Developing software prototypes.<split>D | What is the Unified Modeling Language?
A. A programming language for describing object-oriented models.
B. A diagramming tool for drawing object-oriented models.
C. A graphical language for describing object-oriented models.
D. A standardized graphical language and notation for describing objectoriented models.<split>C | What is a software architecture?
A. The software inside a building.
B. The structure of a client/server system.
C. The overall structure of a software system.
D. The software classes and their relationships.<split>B | What is a software design notation?
A. Notes about the software design.
B. A graphical or textual description of the software.
C. Documentation of the software.
D. A systematic approach for producing a design.<split>C | What is a software design concept?
A. A graphical or textual description of the software.
B. Documentation of the software.
C. A fundamental idea that can be applied to designing a system.
D. A systematic approach for producing a design.<split>D | What is a software design strategy?
A. A graphical or textual description of the software.
B. A fundamental idea that can be applied to designing a system.
C. A systematic approach for producing a design.
D. An overall plan and direction for developing a design.<split>C | What are software structuring criteria?
A. Fundamental ideas that can be applied to designing a system.
B. Systematic approaches for producing a design.
C. Guidelines used to help in structuring a software system into its components.
D. Overall plans for developing a design.<split>A | What is a software design method?
A. A systematic approach for producing a design.
B. Guidelines used to help in structuring a software system into its components.
C. An overall plan for developing a design.
D. A graphical or textual description of the software.<split>B | What is a platform-independent model (PIM)?
A. A software platform before a commitment is made to a specific hardware platform.
B. A precise model of the software architecture before a commitment is made to a specific platform.
C. A precise model of the software architecture mapped to a specific platform.
D. A graphical or textual description of the software.<split>C | What is a platform-specific model (PSM)?
A. A specific hardware platform.
B. A precise model of the software architecture before a commitment is made to a specific platform.
C. A precise model of the software architecture mapped to a specific platform.
D. A graphical or textual description of the software.<split>B | How is an actor depicted on a use case diagram?
A. An oval
B. A stick figure
C. A box
D. A dashed line<split>A | How is a use case depicted on a use case diagram?
A. An oval
B. A stick figure
C. A box
D. A dashed line<split>C | How is a class depicted on a class diagram?
A. A box with one compartment
B. A box with one or two compartments
C. A box with one, two, or three compartments
D. An oval<split>A | How is an association depicted on a class diagram?
A. A solid line joining two class boxes
B. A dashed line joining two class boxes
C. A diamond touching the upper class box
D. An arrowhead touching the upper class box<split>A | How is public visibility depicted for a class element on a class diagram?
A. + sign
B. − sign
C. # sign
D. ∗sign<split>B | What are the two kinds of UML interaction diagrams?
A. Class diagram and sequence diagram
B. Sequence diagram and communication diagram
C. Class diagram and communication diagram
D. Statechart and communication diagram<split>C | What does an interaction diagram depict?
A. Objects and links
B. Classes and relationships
C. Objects and messages
D. States and events<split>D | What does a statechart diagram depict?
A. Objects and links
B. Classes and relationships
C. Objects and messages
D. States and events<split>D | What is a UML package?
A. A box
B. A grouping of classes
C. A grouping of use cases
D. A grouping of model elements<split>C | What does a deployment diagram depict?
A. The physical configuration of the system in terms of physical classes and physical connections between the classes
B. The physical configuration of the system in terms of physical objects and physical connections between the objects
C. The physical configuration of the system in terms of physical nodes and physical connections between the nodes
D. The physical configuration of the system in terms of physical computers and physical networks between the computers<split>C | What is a software life cycle?
A. The life of the software
B. A cyclic approach to developing software
C. A phased approach to developing software
D. The life of software developed in cycles<split>B | What is the waterfall life cycle model?
A. Software developed under a waterfall
B. A process model in which each phase is completed before the next phase is started
C. A process model in which phases are overlapped
D. A process model in which phases are cyclic<split>D | Which of the following is a limitation of the waterfall life cycle model?
A. Software is developed in phases.
B. Each phase is completed before the next phase is started.
C. Software development is cyclic.
D. Software requirements are not properly tested until a working system is available.<split>B | Which of the following approaches can overcome the limitation in the previous question?
A. Phased software development
B. Throwaway prototyping
C. Evolutionary prototyping
D. Incremental development<split>D | What is evolutionary prototyping?
A. Phased software development
B. Throwaway prototyping
C. Risk-driven development
D. Incremental development<split>C | What approach does the spiral model emphasize?
A. Phased software development
B. Throwaway prototyping
C. Risk-driven development
D. Incremental development<split>B | What is the goal of software validation?
A. Building the system
B. Building the right system
C. Building the system right
D. Testing the system<split>C | What is the goal of software verification?
A. Building the system
B. Building the right system
C. Building the system right
D. Testing the system<split>C | What is "white box" testing?
A. Unit testing
B. Integration testing
C. Testing with knowledge of the system internals
D. Testing without knowledge of the software internals<split>D | What is "black box" testing?
A. System testing
B. Integration testing
C. Testing with knowledge of the system internals
D. Testing without knowledge of the software internals<split>C | Which of the following are objectoriented concepts?
A. Modules and interfaces
B. Modules and information hiding
C. Classes, information hiding, and inheritance
D. Concurrency and information hiding<split>C | Which of the following is a characteristic of an object?
A. A function or subroutine
B. A module
C. Groups data and procedures that operate on the data
D. Groups a function and an algorithm<split>C | What is a class?
A. An object instance
B. The implementation of the object
C. A collection of objects with the same characteristics
D. A collection of objects with different characteristics<split>C | What is an operation (also known as method) of a class?
A. Specification and the implementation of a function performed by a class
B. Specification and the implementation of a subroutine provided by a class
C. Specification and the implementation of a function or procedure provided by a class
D. Specification and the implementation of an interface provided by a class<split>C | What is the signature of an operation?
A. The operation's name
B. The operation's function or subroutine
C. The operation's name, parameters, and return value
D. The object's interface<split>B | What is the interface of a class?
A. The signature of a class
B. The specification of operations provided by the class
C. The internals of the class
D. The implementation of the class<split>C | What is an attribute?
A. A description of a class
B. An internal property of a class
C. A data item held by a class
D. A parameter of a class<split>B | What is information hiding in software design?
A. Hiding information so that it cannot be found
B. Hiding a design decision that is considered likely to change
C. Hiding information to make it secure
D. Encapsulating data in a class<split>B | What is data abstraction?
A. Another name for information hiding
B. Encapsulating data so that its structure is hidden
C. Storing data in a database
D. Storing data in a data structure<split>B | What is inheritance?
A. A mechanism for inheriting characteristics from a parent
B. A mechanism for sharing and reusing code between classes
C. A mechanism for sharing data between classes
D. A mechanism for hiding information between classes<split>B | What is carried out during requirements modeling?
A. Functional requirements of the system are described in terms of functions, inputs, and outputs.
B. Functional requirements of the system are described in terms of actors and use cases.
C. Functional requirements of the system are described textually.
D. Functional requirements of the system are determined by interviewing users.<split>C | What is carried out during analysis modeling?
A. Developing use case models
B. Developing data flow and entityrelationship diagrams
C. Developing static and dynamic models
D. Developing software architectures<split>D | What is carried out during design modeling?
A. Developing use case models
B. Developing data flow and entity relationship diagrams
C. Developing static and dynamic models
D. Developing software architectures<split>B | What is carried out during incremental software construction?
A. Detailed design and coding of the classes in a subset of the system
B. Detailed design, coding, and unit testing of the classes in a subset of the system
C. Coding and unit testing of the classes in a subset of the system
D. Unit and integration testing of the classes in a subset of the system<split>C | What is carried out during incremental software integration?
A. Implementation of the classes in each software increment
B. Unit testing of the classes in each software increment
C. Integration testing of the classes in each software increment
D. System testing of the classes in each software increment<split>B | What is carried out during system testing?
A. White box testing
B. Black box testing
C. Unit testing
D. Integration testing<split>C | What is a use case?
A. A case study involving users
B. A sequence of interactions between the user and the system
C. A sequence of interactions between the user and the objects in the system
D. A sequence of user inputs to the system<split>C | What is an actor in a use case?
A. An object inside the system
B. A person who performs on stage
C. An external entity that interacts with the system
D. The customer to whom the system will be delivered<split>B | What is a primary actor?
A. The actor who goes on stage first
B. The actor that starts the use case
C. An actor that participates in the use case
D. An object inside the system<split>C | What is a secondary actor?
A. The actor who goes on stage second
B. The actor that starts the use case
C. An actor that participates in the use case
D. An object inside the system<split>B | What is an alternative sequence in a use case?
A. A sequence that describes an error case
B. A sequence that is different from the main sequence
C. A sequence that describes interactions with a secondary actor
D. A sequence that describes interactions with a primary actor<split>C | What can an inclusion use case be used for?
A. To describe an inclusive use case
B. To describe a lengthy interaction with an actor
C. To describe a lengthy interaction with an actor
D. To describe a use case that includes other use cases<split>D | What can an extension use case be used for?
A. To describe a lengthy interaction with an actor
B. To describe functionality that is common to more than one use case
C. To describe the functionality of a use case that is extended by another use case(s)
D. To describe a conditional part of a different use case that is only executed under certain circumstances<split>D | What can an activity diagram be used for in use case modeling?
A. To depict the sequence of activities executed by all the use cases in the system
B. To depict the sequence of external activities that the use case interacts with
C. To depict the sequence of active objects in a use case
D. To depict the activities in the main and alternative sequences of a use case<split>A | How can a nonfunctional requirement be described in a use case model?
A. In a separate section of the use case description
B. As a use case precondition
C. As a use case postcondition
D. In a separate document<split>C | What is a use case package?
A. A package describing the actors in the system
B. A package describing the use cases in the system
C. A group of related use cases
D. The package of objects that participate in the use case<split>D | What is a class?
A. A course
B. An object instance
C. A client or server in the system
D. A collection of objects with the same characteristics<split>C | What is an attribute?
A. A relationship between two classes
B. A parameter of an operation or method
C. A data value held by an object in a class
D. The return value from an operation<split>A | What is an association?
A. A relationship between two classes
B. A relationship between two objects
C. A link between two classes
D. A link between two objects<split>D | What is meant by the multiplicity of an association?
A. The number of associations in a class
B. The number of associations between two classes
C. How many instances of one class relate to how many instances of another class
D. How many instances of one class relate to a single instance of another class<split>C | What is an association class?
A. A class with multiple associations
B. A class with one association
C. A class that models an association between two or more classes
D. A class that models an association between two or more objects<split>B | What is a generalization/specialization hierarchy?
A. A whole/part relationship
B. An inheritance relationship
C. An association between a generalized class and a specialized class
D. A layered hierarchy<split>D | What is a composition hierarchy?
A. A weak form of a generalization/specialization hierarchy
B. A strong form of a generalization/specialization hierarchy
C. A weak form of a whole/part relationship
D. A strong form of a whole/part relationship<split>C | What is an aggregation hierarchy?
A. A weak form of a generalization/specialization hierarchy
B. A strong form of a generalization/specialization hierarchy
C. A weak form of a whole/part relationship
D. A strong form of a whole/part relationship<split>C | What does the system context class diagram define?
A. The entity classes in the system
B. How the system interfaces to other systems
C. The boundary between the system and the external environment
D. The context classes in the system<split>B | What is an entity class?
A. A class on an entity/relationship diagram
B. A class that stores data
C. A class that interfaces to an external entity
D. An external class<split>C | What is a boundary object?
A. An external object
B. An object that stores data
C. An object that communicates with an external object
D. An object that controls other objects<split>C | What is a control object?
A. An object that depends on other objects
B. An object that communicates with an external object
C. An object that controls other objects
D. An object that is controlled by other objects<split>D | What is a state-dependent control object?
A. An object that depends on a state machine
B. An object that communicates with a state machine
C. An object that controls a state machine
D. An object that executes a state machine<split>C | What is a coordinator object?
A. A manager object
B. An object that makes decisions based on a state machine
C. A decision-making object
D. An object that decides which entity object to interact with<split>C | How would you determine a boundary class from the context diagram?
A. By looking at it
B. By selecting the external classes on the context diagram
C. By determining the software classes that communicate with the external classes
D. By drawing the boundary between the hardware and software classes<split>C | What is a boundary object?
A. An external object
B. An object that stores data
C. An object that communicates with an external object
D. An object that controls other objects<split>A | What do class structuring criteria help with?
A. Structuring an application into classes
B. Defining the attributes of a class
C. Defining the associations of a class
D. Defining the operations of a class<split>A | What is the classification process for application classes analogous to?
A. Categorizing books in a library
B. Deciding how many copies of a book are needed
C. Finding the classrooms in a school
D. Identifying what labs the school has<split>A | What is the purpose of a stereotype in class structuring?
A. To label a class according to its class structuring criterion
B. To identify the objects that belong to the same class
C. To distinguish between external objects and software objects
D. To identify the association between two classes<split>B | What is a business logic object?
A. An object used in business applications
B. An object that defines business - specific application logic
C. The internal logic of an object
D. A business object that determines whether a client request is logical<split>C | What does an interaction diagram depict?
A. The state and transitions inside a control object
B. Classes and their relationships
C. Software objects and the sequence of their interactions
D. The external objects communicating with the system<split>D | How is an actor depicted on an interaction diagram?
https://drive.google.com/file/d/1_dcSGpvUkb-oatXEAmgDZBWr40o-vE16/view?usp=sharing
A. An actor has an association with the interaction diagram.
B. An actor can provide input to or receive output from a boundary object.
C. An actor can provide input to or receive output from a boundary class.
D. An instance of an actor can provide input to or receive output from a boundary object.<split>C | What does a sequence diagram depict?
A. The sequence of external objects communicating with each other
B. Classes and their relationships
C. Software objects and the sequence of their interactions
D. The external objects communicating with the system<split>C | What does a communication diagram depict?
A. The sequence of external objects communicating with each other
B. Classes and their relationships
C. Software objects and the sequence of their interactions
D. The external objects communicating with the system<split>B | What is the instance form of an interaction diagram?
A. Depicts several object instances interacting with each other
B. Depicts one possible sequence of interactions among object instances
C. Depicts all possible interactions among object instances
D. Depicts all object instances and their links to each other<split>C | What is the generic form of an interaction diagram?
A. Depicts several objects interacting with each other
B. Depicts one possible sequence of interactions among objects
C. Depicts all possible interactions among objects
D. Depicts all classes and their associations with each other<split>A | During dynamic interaction modeling, use cases are realized as follows:
A. Determine objects that participate in each use case and the sequence of interactions among them.
B. Determine external objects and the sequence in which they provide inputs to and receive outputs from each use case.
C. Determine sequence of interactions among use cases.
D. Determine how a use case is depicted through internal states and transitions between them.<split>A | Which of the following interactions could happen on an interaction diagram?
A. An external user sends a message to a user interaction object.
B. An external user sends a message to an entity object.
C. An external user sends a message to an I/O object.
D. An external user sends a message to a printer object.<split>C | Which of the following interactions is NOT likely to happen on an interaction diagram?
A. A user interaction object sends a message to an entity object.
B. An input object sends a message to a state-dependent control object.
C. An input object sends a message to a printer object.
D. A user interaction object sends a message to a proxy object.<split>D | What kind of object would be the first object to receive an input from an external object?
A. A user interaction object
B. A proxy object
C. An entity object
D. A boundary object<split>A | What is a state in a state machine?
A. A recognizable situation that exists over an interval of time
B. A condition that is True or False
C. An input from the external environment
D. An output from the system<split>A | What is an event in a state machine?
A. A discrete signal that causes a change of state
B. An input from the external environment
C. An input that is True or False
D. The result of a state transition<split>D | What is an action in a state machine?
A. An occurrence at a point in time
B. A cause of a state transition
C. An interval between two successive events
D. A computation that executes as a result of a state transition<split>A | What is an entry action in a state machine?
A. An action that is performed when the state is entered
B. An action that is performed when the state is left
C. An action that starts executing when the state is entered and completes executing when the state is left
D. An action that executes as a result of a state transition<split>B | What is an exit action in a state machine?
A. An action that is performed when the state is entered
B. An action that is performed when the state is left
C. An action that starts executing when the state is entered and completes executing when the state is left
D. An action that executes as a result of a state transition<split>C | What is a condition used for in a state machine?
A. A conditional action
B. A conditional state
C. A conditional state transition
D. A conditional event<split>A | What is a state transition into a composite state equivalent to?
A. A transition into only one of the substates
B. A transition into each of the substates
C. A transition into none of the substates
D. A transition into any one of the substates<split>B | What is a state transition out of a composite state equivalent to?
A. A transition out of only one of the substates
B. A transition out of each of the substates
C. A transition out of none of the substates
D. A transition out of any one of the substates<split>A | How does a composite state relate to a substate?
A. A composite state is decomposed into substates.
B. Composite states are composed into substates.
C. A composite state transitions to a substate.
D. A substate transitions to a composite state<split>B | If two actions are shown on a given state transition, which of the following is true?
A. The two actions are dependent on each other.
B. The two actions are independent of each other.
C. One action provides an input to the other action.
D. The second action executes when the first action completes execution.<split>C | What does a state-dependent interaction involve?
A. A control object
B. A state-dependent entity object
C. A state-dependent control object
D. A state-dependent user interaction object<split>C | Which kind of object executes a state machine?
A. Any software object
B. An entity object
C. A state-dependent control object
D. A state chart<split>A | An input message to a state-dependent control object corresponds to:
A. An event on the internal state machine
B. An action on the internal state machine
C. A condition on the internal state machine
D. A state on the internal state machine<split>B | An output message from a state dependent control object correspondsto:
A. An event on the internal state machine
B. An action on the internal state machine
C. A condition on the internal state machine
D. A state on the internal state machine<split>B | An interaction diagram should be developed for:
A. Only the main sequence of the use case
B. The main sequence and every alternative sequence of the use case
C. The main sequence and a representative alternative sequence of the use case
D. The alternative sequences of the use case<split>D | Which of the following could happen on an interaction diagram?
A. A state-dependent control object sends a message to an entity object.
B. A state-dependent control object sends a message to a coordinator object.
C. A state-dependent control object sends a message to a printer object.
D. All of the above<split>B | If the same state machine is used in more than one use case, how is this modeled on interaction diagrams?
A. Develop one state-dependent control object for each use case.
B. Develop one state-dependent control object containing states from each use case.
C. Develop a hierarchical state machine
D. Develop a coordinator object<split>A | How would two state-dependent control objects communicate with eachother?
A. By sending messages to each other
B. By transitioning to the same state
C. Through an entity object
D. Through a proxy object<split>A | An object can send alternative messages a or b to a state-dependent control object. How is this handled in the state machine?
A. One state with a different transition out of it for each incoming message
B. One state for each of the alternative messages
C. A composite state to handle the alternative messages
D. A substate for each alternative message<split>A | In a system in which a client object executes a state machine and communicates with a service, which of the following is true?
A. The client has a state-dependent control object but the service does not.
B. The service has a state-dependent control object but the client does not
C. Both the client and the service have state-dependent control objects.
D. Neither the client nor the service has a state-dependent control object.<split>C | What does the software architecture describe?
A. The software inside a building
B. The structure of a client/server system
C. The overall structure of a software system
D. The software classes and their relationships<split>B | Which of the following statements is NOT true for a component?
A. A composite object composed of other objects
B. An operation
C. A simple object
D. Provides an interface<split>B | What is a structural view of a software architecture?
A. A view in terms of a module hierarchy
B. A view in terms of components and connectors
C. A view of the physical configuration in terms of nodes and interconnections
D. A view in terms of objects and messages<split>D | What is a dynamic view of a software architecture?
A. A view in terms of a module hierarchy
B. A view in terms of components and connectors
C. A view of the physical configuration in terms of nodes and interconnections
D. A view in terms of objects and messages<split>C | What is a deployment view of a software architecture?
A. A static view in terms of a module hierarchy
B. A static view in terms of components and connectors
C. A view of the physical configuration in terms of nodes and interconnections
D. A dynamic interaction view in terms of objects and messages<split>A | What is a software architectural pattern?
A. The structure of the major subsystems of a system
B. The components and connectors in a software architecture
C. A small group of collaborating objects
D. A recurring architecture used in a variety of systems<split>A | What happens in a Layers of Abstraction pattern?
A. Each layer uses services in the layer immediately below it.
B. Each layer uses services in the layer immediately above it.
C. Each layer uses services in the layers immediately above it and below it.
D. Each layer is independent of the other layers.<split>B | What happens in a Call/Return pattern?
A. A calling operation in the calling object sends a message to an operation (a.k.a. method) in the called object.
B. A calling operation in the calling object invokes an operation (a.k.a. method) in the called object.
C. The calling object waits for a response from the called object.
D. The calling object does not wait for a response from the called object.<split>B | A producer sends a message to a consumer. Which one of the following is asynchronous message communication?
A. The producer waits for a response from the consumer.
B. The producer does not wait for a response from the consumer.
C. The producer goes to sleep.
D. The producer waits for a timeout.<split>A | A producer sends a message to a consumer. Which one of the followingis synchronous message communication with reply?
A. The producer waits for a response from the consumer.
B. The producer does not wait for a response from the consumer.
C. The producer goes to sleep
D. The producer waits for a timeout.<split>B | What is an integrated communication diagram?
A. A communication diagram formed by combining objects
B. A synthesis of all the communication diagrams developed to support the use cases
C. A communication diagram depicting the objects that realize a use case
D. A communication diagram that integrates the entity objects from the static model<split>A | Which of the following objects should be assigned to the same subsystem?
A. Objects that are part of the same composite object
B. Client and server objects
C. User interface and entity objects
D. Objects that are associated with each other<split>B | Objects that are in geographically different locations should be:
A. In the same subsystem
B. In different subsystems
C. In a composite subsystem
D. In layered subsystems<split>B | If scope of control is used in subsystem structuring, then:
A. A user interface object is placed in the same subsystem as an entity object it updates
B. A state-dependent control object is placed in the same subsystem as theobjects it controls.
C. A state-dependent control object is placed in a different subsystem from the objects it controls.
D. A user interface object is placed in a different subsystem from an entity object it updates.<split>A | How should an external object be designed to interface to the system?
A. It should interface to one subsystem
B. It should interface to several subsystems.
C. It should interface to every subsystem.
D. It should interface to none of the subsystems.<split>C | A user interface subsystem is a type of:
A. Control subsystem
B. Service subsystem
C. Client subsystem
D. I/O subsystem<split>B | Which of the following objects are NOT likely to be in the same subsystem?
A. User interface object and entity object
B. State-dependent control object and coordinator object
C. Business logic object and entity object
D. I/O object and state-dependent control object<split>C | Which of the following subsystems isNOT likely to be a client subsystem?
A. Control subsystem
B. User interaction subsystem
C. Service subsystem
D. I/O subsystem<split>D | When is a coordinator subsystem required?
A. If the subsystem needs to coordinate several internal objects
B. If the subsystem needs to coordinate multiple I/O devices
C. If the subsystem receives messagesfrom multiple client subsystems
D. If the subsystem needs to coordinate the execution of other subsystems<split>A | When is a control subsystem required?
A. If the subsystem needs to control several internal objects
B. If the subsystem needs to control multiple I/O devices
C. If the subsystem needs to control multiple client subsystems
D. If the subsystem needs to control the execution of other subsystems<split>B | What is an information hiding object?
A. An active object that encapsulates data
B. A passive object that encapsulates data
C. A class that encapsulates data
D. A task that encapsulates data<split>B | What is a class interface?
A. Specifies the internals of the operations of a class
B. Specifies the externally visible operations of a class
C. Specifies the parameters of a class operation.
D. Specifies the signature of a class operation<split>D | Which of the following is NOT an object-oriented concept?
A. Information hiding
B. Class
C. Subclass
D. Subroutine<split>C | Which of the following is a class that realizes an interface?
A. The class calls the interface
B. The class implements the interface
C. The class implements the interface
D. The class is independent of the interface.<split>D | Which of the following is an entity class?
A. An information hiding class
B. A subclass
C. A control class
D. A data abstraction class<split>D | What does a state machine class encapsulate?
A. A state transition table
B. A state chart
C. The current state of the machine
D. A state transition table and the current state of the machine<split>D | Which of the following is unlikely to be a graphical user interface class?
A. A menu
B. A window
C. A button
D. A pin<split>D | Which of the following is unlikely to be encapsulated in a business logic class?
A. A business rule
B. Calls to operations of an entity class
C. Deny cash withdrawal if balance of account is less than $10
D. A dialog box<split>C | Which of the following is NOT allowed through inheritance?
A. Subclass inherits attributes from superclass.
B. Subclass inherits operations from superclass.
C. Subclass redefines attributes inherited from superclass.
D. Subclass redefines operations inherited from superclass.<split>B | Which of the following is true for an abstract class?
A. It is used as a template for creating objects.
B. It is used as a template for creating subclasses.
C. It is used as a template for creating classes.
D. It is used as a template for creating super classes.<split>D | In object-oriented design, polymorphism means that:
A. Different classes may have the same name.
B. Different classes may have the same interface name.
C. Different classes may have the same superclass name
D. Different classes may have the same operation name.<split>D | With polymorphism and dynamic binding, an object can:
A. Invoke operation of different names on the same objects.
B. Invoke operations of different names on different objects.
C. Invoke an operation of the same name on the same object.
D. Invoke an operation of the same name on different objects.<split>D | What is a server?
A. A hardware/software system that serves customers
B. A subsystem that makes requests and waits for the responses
C. A subsystem that responds to requests from clients
D. A hardware/software system that provides one or more services for multiple clients<split>B | The basic client/single service architectural pattern states that:
A. Multiple clients request services, and multiple services fulfill client requests.
B. Multiple clients request services, and a service fulfills client requests.
C. A client requests services, and a service fulfills client requests.
D. A client requests services, and multiple services fulfill client requests.<split>D | In a Multi-tier Client/Service architectural pattern, which of the following is true about an intermediate tier?
A. An intermediate tier is a client tier.
B. An intermediate tier is a service tier.
C. An intermediate tier is both a control tier and a service tier.
D. An intermediate tier is both a client tier and a service tier<split>B | How is Multiple Client/Multiple Service architectural pattern different from a Multiple Client/Single Service architectural pattern?
A. A service can receive requests from multiple clients.
B. A client can send requests to multiple services
C. A client can send requests to other clients.
D. A service can respond to requests from multiple clients.<split>A | How is a sequential service designed?
A. One object that responds to requests from clients
B. Multiple objects that respond to requests from clients
C. One subsystem that responds to requests from clients
D. Multiple subsystems that respond to requests from clients<split>B | How is a concurrent service designed?
A. One object that responds to requests from clients
B. Multiple objects that respond to requests from clients
C. One subsystem that responds to requests from clients
D. Multiple subsystems that respond to requests from clients<split>C | What is a database wrapper class?
A. A class that encapsulates a data structure
B. A class that encapsulates a database
C. A class that encapsulates the details of how to access data in a database
D. A class that encapsulates a relational table<split>A | When designing an entity class as a relational table, which of the following is NOT true?
A. The relational table has multiple primary keys.
B. The relational table has multiple foreign keys.
C. The relational table has a primary key.
D. The relational table has a concatenated primary key.<split>D | When mapping an aggregation hierarchy to a relational table, which of the following is NOT true?
A. The aggregate and part tables have different primary keys.
B. The aggregate and part tables have the same primary key
C. The primary key of the aggregate table is a foreign key of the part table.
D. The primary key of the part table is a foreign key of the aggregate table.<split>C | When mapping a generalization/specialization relationship to a relationaldatabase, which of the following is NOT possible?
A. The superclass and each subclass are designed as relational tables.
B. Only subclasses are designed as relational tables
C. The aggregate and part classes are designed as relational tables.
D. Only the superclass is designed as a relational table.<split>B | What is a service-oriented architecture (SOA)?
A. A distributed software architecture consisting of multiple related services
B. A distributed software architecture consisting of multiple autonomous services
C. A distributed client/service architecture
D. A distributed software architecture<split>C | Which of the following properties DOES NOT apply to a service?
A. Reusable
B. Discoverable
C. Fixed
D. Autonomous<split>A | In a SOA, which of the following is NOT true?
A. A client communicates with a specific service provided on a fixed server configuration.
B. A client discovers and links to a service.
C. Multiple clients communicate with a service.
D. Standard protocols are provided to allow clients to communicate with services.<split>D | What is an object broker?
A. An object that breaks into a system
B. An object that sends requests to other objects
C. An object that handles requests sent by other objects
D. An object that mediates interactions between clients and services<split>A | Why does a service register with a broker?
A. So that service requesters can discover it
B. So that a service can interrogate the broker
C. So that the registry is up to date
D. So that the service can relocate<split>B | When is it particularly useful to use the Broker Handle pattern in place of the Broker Forwarding pattern?
A. If the client only communicates with the service once
B. If the client needs to have a dialog with the service
C. If the client knows the type of service required but not the specific service
D. If the client needs to provide the broker with a handle<split>B | Yellow pages brokering is useful when a service requester:
A. Needs to discover the location of the service
B. Knows the type of service required but not the specific service
C. Knows the specific service required but not the type of service
D. Needs to discover the broker<split>C | What is a transaction?
A. Consists of two or more operations
B. Consists of one operation
C. Consists of two or more operations that are indivisible
D. Consists of two or more operations that are divisible<split>C | What is a compound transaction?
A. The compound transaction is indivisible
B. The compound transaction is atomic.
C. The compound transaction is decomposed into atomic transactions.
D. The compound transaction is decomposed into subatomic transactions.<split>D | With a Negotiation pattern, which of the following is NOT true?
A. The client agent can propose a service.
B. The service agent can offer a service in response to a client agent proposal.
C. The client agent can request a service.
D. The service agent can offer a service in response to a client agent request.<split>D | In a distributed component-based software architecture, which of the following statements is the most complete description of component deployment?
A. Component instances can be deployed to different nodes in a geographically distributed environment.
B. Component instances can be deployed to different nodes in a geographically distributed environment before design.
C. Component instances can be deployed to different nodes in a geographically distributed environment before implementation.
D. Component instances can be deployed to different nodes in a geographically distributed environment after design and implementation.<split>A | What does a component interface consist of?
A. The externally visible operations of a component
B. The operations provided by a component
C. The operations required by a component
D. The operations that a component supports<split>A | What does a component's provided interface consist of?
A. The operations that a component must fulfill
B. The operations inside a component
C. The operations that a component uses
D. The operations of a component<split>B | What does a component's required interface consist of?
A. The operations that a component must fulfill
B. The operations inside a component
C. The operations that a component uses
D. The visible operations of a component<split>C | What does a connector join?
A. The provided port of one component to the required port of another component
B. The provided port of one component to the provided port of another component
C. The required port of one component to the provided port of another component
D. The required port of one component to the required port of another component<split>A | What does a delegation connector join?
A. An outer provided port to an inner provided port
B. An outer provided port to an inner required port
C. An outer required port to an inner provided port
D. An outer provided port to an outer required port<split>C | What is broadcast message communication?
A. A message sent to several recipients
B. A message sent to a specific recipient
C. A message sent to all recipients
D. A message sent to recipients who are members of a group<split>D | What are the communication characteristics of subscription/notification?
A. A message sent to several recipients
B. A message sent to a specific recipient
C. A message sent to all recipients
D. A message sent to recipients who have joined a group<split>C | During application deployment:
A. The application is executed.
B. Component instances are executed.
C. Component instances are assigned to hardware nodes.
D. Component instances are instantiated.<split>A | What is an advantage of localized autonomy in component-based design?
A. If a component goes down, other components can continue to execute.
B. Components execute concurrently.
C. Components are distributed.
D. Components communicate using messages.<split>D | What is the difference between an active object and a passive object?
A. An active object controls a passive object.
B. An active object does not have a thread of control; a passive object has a thread of control.
C. An active object executes in a distributed system; a passive object executes in a centralized system.
D. An active object has a thread of control; a passive object does not have a thread of control.<split>C | What is an event-driven input task?
A. A task that executes every few seconds
B. A task that controls other tasks
C. A task that receives inputs from an external device when it generates interrupts
D. A task that checks whether there is new input from an external device<split>B | What is a periodic task?
A. A task that responds to each message it receives
B. A task that is activated by a timer event
C. A task that is activated by an external event
D. A task that is activated by an input event<split>B | What is a demand-driven task?
A. A task that responds to each message it receives
B. A task that is activated by an internal message or event from another task
C. A task that is activated by an external event
D. A task that is activated by an input event<split>B | What is a control task?
A. A task that control other tasks
B. A task that executes a statechart
C. A task that executes on demand
D. A task that controls I/O devices<split>C | What is a user interaction task?
A. A task that interacts with I/O devices
B. A task that interacts with users
C. A task that interacts with a user sequentially
D. A task that interacts with a user concurrently<split>B | Which of the following is true for a Centralized Control architectural pattern?
A. Control is divided among various control components.
B. It provides the overall control and sequencing of the system.
C. It provides overall control by coordinating several control components.
D. It provides overall control over various I/O objects<split>A | Which of the following is true for a Distributed Control architectural pattern?
A. Control is divided among various control components.
B. It responds to multiple requests from client subsystems.
C. It provides overall control by coordinating several control components.
D. It provides distributed control over various I/O objects.<split>C | Which of the following is true for a Hierarchical Control architectural pattern?
A. Control is divided among various control components.
B. It provides overall control over several client subsystems
C. It provides overall control by coordinating several control components.
D. It provides overall control over various I/O objects.<split>D | Which of the following is NOT a case of event synchronization?
A. External event
B. Internal event
C. Timer event
D. User event<split>A | What is a software product line (SPL)?
A. A family of systems with some common components and some variable components
B. An assembly line
C. A family of identical systems
D. The software products marketed by a company<split>C | What is an optional use case?
A. A use case with some optional steps
B. A use case that does not need to be developed
C. A use case that is required by some product line members but not others
D. A use case that can be chosen in place of a different use case in a SPL member<split>B | What is a use case variation point?
A. A variable use case
B. A location in the use case at which change can occur
C. An alternative use case
D. A location in the use case where an alternative path can start<split>A | What is a SPL feature?
A. A requirement or characteristic that is provided by one or more SPL members
B. A marketing need
C. A class provided by the SPL
D. A SPL use case<split>B | What is a SPL feature group?
A. A collection of features
B. A group of features with a partiular constraint on their usage in a SPL member
C. A group of mutually exclusive features
D. A group of optional features with a particular constraint on their usage in a SPL member<split>C | What is a kernel class in a SPL?
A. An entity class in the SPL
B. A SPL class that stores essential data
C. A class that is required by all members of the SPL
D. An external class to the SPL<split>D | What two categories of stereotypes are used in modeling SPL classes?
A. Kernel and optional stereotypes
B. Optional and variant stereotypes
C. Common and variant stereotypes
D. Reuse and application role stereotypes<split>C | How are feature conditions used in a SPL state machine?
A. A guard condition
B. A condition that is True or False
C. To identify if a feature is selected or not in the state machine
D. To allow state machine inheritance<split>B | What is a kernel system in a SPL?
A. A member of the SPL only composed of kernel classes
B. A member of the SPL composed of kernel classes and possibly some default classes
C. A member of the SPL composed of kernel classes and possibly some optional classes
D. A member of the SPL composed of kernel classes and possibly some entity classes<split>C | What does the SPL software architecture describe?
A. The software inside a family of buildings
B. The structure of a client/server product family
C. The overall structure of the software productline
D. The software product line classes and their relationships<split>B | What do software quality attributes address?
A. Software functional requirements
B. Software nonfunctional requirements
C. Software performance requirements
D. Software availability requirements<split>B | What is maintainability?
A. The extent to which software is capable of being changed before deployment
B. The extent to which software is capable of being changed after deployment
C. The extent to which software is capable of being changed during development
D. The extent to which software is capable of being changed after development<split>C | What is modifiability?
A. The extent to which software is capable of being modified after deployment
B. The extent to which software is capable of being modified after initial development
C. The extent to which software is capable of being modified during and after initial development
D. The extent to which software is capable of being changed before deployment<split>B | What is testability?
A. The extent to which software is capable of being developed
B. The extent to which software is capable of being tested before deployment
C. The extent to which software is capable of being tested after deployment
D. The extent which the software is understood<split>A | Traceability is the extent to which a product:
A. Can be traced back to products of previous phases
B. Traced back to the requirements
C. Traced forward to implementation
D. Deployed to a hardware configuration<split>B | What is scalability?
A. The extent to which an application can grow
B. The extent to which the system is capable of growing after its initial deployment
C. The extent to which the system is capable of growing during development
D. The extent to which the system is capable of being scaled<split>B | What is reusability?
A. The extent to which software implementation is reusable
B. The extent to which the system is capable of growing after its initial deployment
C. The extent to which SPL technology can be introduced
D. The extent to which the software is common among a program family<split>C | Which of the following is not performance-related?
A. System response time
B. System throughput
C. System availability
D. System capacity<split>C | Which of the following is not addressed by a secure system?
A. System penetration
B. Denial of service
C. System scalability
D. System authorization<split> | Which of the following system problems does availability address?
A. Denial of service
B. Single point of failure
C. System throughput
D. System penetration